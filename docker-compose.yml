version: '3.8'
services:
    php:
        build:
            context: "docker/php"
            dockerfile: "Dockerfile"
        restart: always
        container_name: test_task_php
        volumes:
            - './src:/var/www/html'
        depends_on:
            - mysql
            - redis
            - rabbitmq
        env_file:
            - .env
        ports:
            - "9000:9000"
        networks:
            - test_task

    nginx:
        image: nginx:1.21.3-alpine
        restart: always
        container_name: test_task_nginx
        volumes:
            - './src:/var/www/html'
            - './docker/nginx/default.conf:/etc/nginx/conf.d/default.conf'
            - './docker/nginx/nginx.conf:/etc/nginx/nginx.conf'
        environment:
            - TZ
        links:
            - php
        depends_on:
            - apidoc
        ports:
            - "80:80"
        networks:
            - test_task

    mysql:
        image: mysql:8.0
        container_name: test_task_mysql
        volumes:
            - 'db:/var/lib/mysql'
        restart: always
        command: mysqld --sql_mode=""
        environment:
            - MYSQL_ROOT_PASSWORD
            - MYSQL_DATABASE=${DATABASE_NAME}
            - MYSQL_USER=${DATABASE_USER}
            - MYSQL_PASSWORD=${DATABASE_PASSWORD}
            - TZ
        ports:
            - "3306:3306"
        networks:
            - test_task
        healthcheck:
            test: mysqladmin -uroot -p${MYSQL_ROOT_PASSWORD} status >/dev/null 2>/dev/null
            interval: 10s
            timeout: 10s
            retries: 5

    redis:
        image: redis:6.2.6
        restart: always
        container_name: test_task_redis
        ports:
            - "6379:6379"
        command: /bin/bash -c "redis-server --appendonly yes && echo never > /sys/kernel/mm/transparent_hugepage/enabled"
        networks:
            - test_task

    rabbitmq:
        image: rabbitmq:3.9.7-management
        restart: always
        container_name: test_task_rabbitmq
        hostname: rest-menu-rmq
        volumes:
            - 'rabbitmq:/var/lib/rabbitmq/'
        networks:
            - test_task
        healthcheck:
            test: rabbitmq-diagnostics ping >/dev/null 2>/dev/null
            interval: 10s
            timeout: 10s
            retries: 5

    apidoc:
        image: swaggerapi/swagger-ui
        container_name: test_task_swagger
        restart: always
        volumes:
            - './documentation/:/usr/share/nginx/html/documentation/'
        environment:
            URLS: "[
                { url: './documentation/v1.yml', name: 'API-v1' },
            ]"
        networks:
            - test_task
volumes:
    rabbitmq:
    db:
networks:
    test_task:
